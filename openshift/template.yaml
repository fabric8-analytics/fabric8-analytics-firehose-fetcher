apiVersion: v1
kind: Template
labels:
  template: f8a-firehose-fetcher
metadata:
  name: f8a-firehose-fetcher
  annotations:
    description: f8a-firehose-fetcher
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      service: f8a-firehose-fetcher
    name: f8a-firehose-fetcher
  spec:
    replicas: 1
    selector:
      service: f8a-firehose-fetcher
    template:
      metadata:
        labels:
          service: f8a-firehose-fetcher
      spec:
        containers:
        - env:
          - name: DEPLOYMENT_PREFIX
            valueFrom:
              configMapKeyRef:
                name: bayesian-config
                key: deployment-prefix
          - name: WORKER_ADMINISTRATION_REGION
            value: "api"
          - name: FIREHOSE_STREAM_URL
            value: ${FIREHOSE_STREAM_URL}
          - name: AWS_SQS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: aws
                key: sqs-access-key-id
          - name: AWS_SQS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws
                key: sqs-secret-access-key
          - name: AWS_S3_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
               name: aws
               key: s3-access-key-id
          - name: AWS_S3_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws
                key: s3-secret-access-key
          # this won't get used if running with SQS
          - name: RABBITMQ_SERVICE_SERVICE_HOST
            value: bayesian-broker
          - name: PGBOUNCER_SERVICE_HOST
            value: bayesian-pgbouncer
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: database
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: username
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: coreapi-postgres
                key: password
          - name: ENABLE_SCHEDULING
            value: ${ENABLE_SCHEDULING}
          image: "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${IMAGE_TAG}"
          name: f8a-firehose-fetcher
          livenessProbe:
            exec:
              command:
              - cli
              - "--liveness"
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          readinessProbe:
            exec:
              command:
              - cli
              - "--liveness"
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 30
          resources:
            requests:
              memory: "128Mi"
            limits:
              memory: "256Mi"
        restartPolicy: Always
    test: false
    triggers:
    - type: ConfigChange
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      service: f8a-firehose-fetcher
    name: f8a-firehose-fetcher
  spec:
    ports:
    - name: "35000"
      port: 35000
      protocol: TCP
      targetPort: 35000
    selector:
      service: f8a-firehose-fetcher

parameters:
- description: URL where libraries.io Firehose stream is running
  displayName: Firehose Stream URL
  required: true
  name: FIREHOSE_STREAM_URL
  value: "http://firehose.libraries.io/events"

- description: Docker registry where the image is
  displayName: Docker registry
  required: true
  name: DOCKER_REGISTRY
  value: "registry.devshift.net"

  - description: Variable which defines whether new analysis will be scheduled
  displayName: Enable scheduling variable
  required: true
  name: ENABLE_SCHEDULING
  value: 0

- description: Docker image to use
  displayName: Docker image
  required: true
  name: DOCKER_IMAGE
  value: "fabric8-analytics/f8a-firehose-fetcher"

- description: Image tag
  displayName: Image tag
  required: true
  name: IMAGE_TAG
  value: "latest"  # image-tag
